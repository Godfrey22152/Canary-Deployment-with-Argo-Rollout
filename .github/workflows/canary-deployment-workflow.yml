name: Canary-Deployment-CICD-pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted  # SetUp a self-hosted agent
    env:
      DOCKER_HUB_PAT: ${{ secrets.DOCKER_HUB_PAT }}
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}


    steps:
      # 1. Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: "pip"

      # 3. Install Dependencies and Tools
      - name: Install Dependencies and Tools
        run: |
          sudo apt-get update
          
          # Check if Docker is installed before installing
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get install -y docker.io
            sudo systemctl enable docker
          else
            echo "Docker is already installed."
          fi

          # Ensure Docker is running
          if ! sudo systemctl is-active --quiet docker; then
            echo "Starting Docker..."
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          sudo chmod 666 /var/run/docker.sock

          # Check if Trivy is installed before downloading (for container security scanning)
          if ! command -v trivy &> /dev/null; then
            echo "Installing Trivy..."
            wget https://github.com/aquasecurity/trivy/releases/download/v0.27.1/trivy_0.27.1_Linux-64bit.deb
            sudo dpkg -i trivy_0.27.1_Linux-64bit.deb
          else
            echo "Trivy is already installed."
          fi

          
          # Install Python security scanner (Bandit) --> Check if Bandit is installed before installing
          if ! pip show bandit > /dev/null 2>&1; then
            echo "Installing Bandit..."
            pip install bandit
          else
            echo "Bandit is already installed."
          fi
          
      # 4. Install Python project dependencies
      - name: Install Project Dependencies
        run: |
          python -m pip install --upgrade pip

          # Check if dependencies are installed before installing
          if ! pip show flake8 pytest pytest-cov > /dev/null 2>&1; then
            echo "Installing Python dependencies..."
            pip install flake8 pytest pytest-cov
          else
            echo "Python dependencies are already installed."
          fi
          
          # Install from requirements.txt if present
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt
          fi
          
      # 5. Lint the Python Code with Flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # 6. Trivy FS Scan
      - name: Trivy FS Scan
        run: |
          trivy fs --format json -o trivy-fs-report.json --security-checks vuln,config --severity HIGH,CRITICAL .

      # 7. Upload Trivy Report
      - name: Upload Trivy FS Report
        uses: actions/upload-artifact@v4
        with:
          name: Trivy-fs-report
          path: trivy-fs-report.json

      # 8. Static Code Analysis with Bandit
      - name: Static Code Analysis with Bandit
        run: |
          bandit -ll -ii -r . -f json -o bandit_report.json || true

      # 9. Upload Bandit Report
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: Bandit-Scan-Report
          path: bandit_report.json

      # 10. Unit Testing and Coverage with Pytest
      - name: Unit Testing and Coverage with Pytest
        run: |
          export PYTHONPATH=$(pwd)
          pytest --cov=app Tests/ --junitxml=pytest_report.xml --cov-report=xml:coverage.xml

      # 11. Upload Test Results and Code Coverage
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Pytest_Unit_Test-Report
          path: pytest_report.xml

      - name: Upload Code Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: Code_Coverage-Report
          path: coverage.xml

      - name: Upload Reports to Nexus Repository
        run: |
          curl -u ${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_API_KEY }} -T trivy-fs-report.json \
               "http://192.168.95.58:8081/repository/test-reports/Trivy-fs-report/trivy-fs-report.json"


