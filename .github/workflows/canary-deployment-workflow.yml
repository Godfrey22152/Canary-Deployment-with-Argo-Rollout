name: Canary-Deployment-CICD-pipeline

on:
  # prompt for a manual selection of Image tag.
  workflow_dispatch:
    inputs:
      release_type:
        description: "Select release type (stable or canary)"
        required: true
        default: "stable"
        type: choice
        options:
          - stable
          - canary

jobs:
  build:
    runs-on: self-hosted  # Running on the self-hosted agent (Canary Runner)
    env:
      DOCKER_HUB_PAT: ${{ secrets.DOCKER_HUB_PAT }}
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}


    steps:
      # 1. Checkout the repository based on the release type
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_type == 'canary' && 'canary' || 'main' }}

      # 2. Set up Python.
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: "pip"
          
      # 3. Install Python project dependencies
      - name: Install Project Dependencies
        run: |
          python -m pip install --upgrade pip

          # Check if dependencies are installed before installing
          if ! pip show flake8 pytest pytest-cov > /dev/null 2>&1; then
            echo "Installing Python dependencies..."
            pip install flake8 pytest pytest-cov
          else
            echo "Python dependencies are already installed."
          fi
          
          # Install from requirements.txt if present
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt
          fi
          
      # 4. Lint the Python Code with Flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Ensure the test-reports directory exists before running Trivy
      - name: Ensure Trivy Reports Directory Exists
        run: mkdir -p test-reports/Trivy-fs-report

      # 5. Trivy File System Scan
      - name: Trivy FS Scan
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: "fs"  # File System scan
          scan-ref: "."  # Scan the current directory
          severity: "HIGH,CRITICAL"  # Only report HIGH and CRITICAL vulnerabilities
          format: "json"  # Output format as JSON
          output: "test-reports/Trivy-fs-report/trivy-fs-report.json"  # Save the report in the desired directory
          scanners: "vuln,config"  # Include both vulnerability and misconfiguration scans
          exit-code: "0"  # Ensure the job does not fail due to found vulnerabilities

      # 6. Upload Trivy Report
      - name: Upload Trivy FS Report
        uses: actions/upload-artifact@v4
        with:
          name: Trivy-fs-report
          path: test-reports/Trivy-fs-report/trivy-fs-report.json

      # 7. Static Code Analysis with Bandit
      - name: Static Code Analysis with Bandit
        uses: mdegis/bandit-action@v1.1
        with:
          path: "."  
          level: "LOW"  # Equivalent to '-ll' flag
          confidence: "LOW"  # Equivalent to '-ii' flag
          exit_zero: true  # Prevent failure if issues are found
        continue-on-error: true  # Ensures the workflow doesn't fail if vulnerabilities exist

      # Move the report to the expected directory
      - name: Store Bandit Report
        run: |
          mkdir -p test-reports/Bandit-Scan-Report
          mv bandit-report.json test-reports/Bandit-Scan-Report/bandit_report.json

      # 8. Upload Bandit Report
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: Bandit-Scan-Report
          path: test-reports/Bandit-Scan-Report/bandit_report.json

      # 9. Unit Testing and Coverage with Pytest
      - name: Unit Testing and Coverage with Pytest
        run: |
          mkdir -p test-reports/Pytest_Unit_Test-Report; mkdir -p test-reports/Code_Coverage-Report
          export PYTHONPATH=$(pwd)
          pytest --cov=app Tests/ --junitxml=test-reports/Pytest_Unit_Test-Report/pytest_report.xml --cov-report=xml:test-reports/Code_Coverage-Report/coverage.xml

      # 10. Upload Pytest Results and Code Coverage.
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Pytest_Unit_Test-Report
          path: test-reports/Pytest_Unit_Test-Report/pytest_report.xml

      - name: Upload Code Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: Code_Coverage-Report
          path: test-reports/Code_Coverage-Report/coverage.xml

      # 11. Set up Docker 
      - name: Docker Setup Docker
        uses: docker/setup-docker-action@v4.1.0

      # 12. Set up Docker Build Variable
      - name: Set Up Docker Build Variables
        run: |
          TIMESTAMP=$(date "+%Y-%m-%d_%H-%M-%S")  # Generate timestamp-based tag
          echo "IMAGE_NAME=godfrey22152/quiz-game-app" >> $GITHUB_ENV
          echo "TAG=${{ github.event.inputs.release_type }}-${TIMESTAMP}" >> $GITHUB_ENV

      # 13. Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$TAG .

      # 14. Push Docker Image to DockerHub.
      - name: Docker Image Push
        run: |
          echo ${{ secrets.DOCKER_HUB_PAT }} | docker login -u ${{ secrets.DOCKER_HUB_USER }} --password-stdin
          docker push $IMAGE_NAME:$TAG

      # 15. Docker Image Scan with Docker Scout
      - name: Docker Image Scan with Docker Scout
        run: |
          # Check if Docker Scout CLI is installed
          if ! command docker scout version &> /dev/null; then
            echo "Docker Scout CLI not found. Installing..."
            curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
          else
            echo "Docker Scout CLI is already installed."
          fi
          
          mkdir -p test-reports/Docker-Scout-Reports

          # Run Docker Scout quickview command
          docker scout quickview $IMAGE_NAME:$TAG > test-reports/Docker-Scout-Reports/quickview_scan_report.sarif.json

          # Run Docker Scout CVEs command
          docker scout cves $IMAGE_NAME:$TAG --format sarif --only-severity critical,high > test-reports/Docker-Scout-Reports/cves_scan_report.sarif.json

      # 16. Upload Docker Scout Reports
      - name: Upload Docker Scout Reports
        uses: actions/upload-artifact@v4
        with:
          name: Image-Scan-Reports
          path: test-reports/Docker-Scout-Reports/   

      # 17. Securely store security scan results in Nexus Repository. 
      - name: Upload Reports to Nexus Artifact Repository
        run: |
          find test-reports -type f | while read file; do
            # Construct the Nexus upload URL by replacing "test-reports/" with the target path
            target_path=$(echo "$file" | sed 's|test-reports/||')

            echo "Uploading $file to Nexus..."
  
            curl -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" \
                 --upload-file "$file" \
                 "${{ secrets.NEXUS_URL }}/repository/test-reports/$target_path"
          done  

      # 18. Fetch deployment manifests from main branch only if not already on main
      - name: Ensure Deployment Manifests are Available
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$CURRENT_BRANCH" != "main" ]]; then
            echo "Not on main branch. Fetching Manifest_Files from main branch..."
            git fetch origin main
            git checkout origin/main -- Manifest_Files/
          else
            echo "Already on main branch. No need to fetch Manifest_Files."
          fi
          
      # 19. Update Image Tag in Manifest_Files/quiz-app-rollout.yaml
      - name: Update Image Tag in quiz-app-rollout.yaml
        run: |
          echo "Updating image tag in rollout manifest..."
          
          # Use the TAG variable set in the previous step
          sed -i "s|image: godfrey22152/quiz-game-app:stable|image: ${IMAGE_NAME}:${TAG}|g" Manifest_Files/quiz-app-rollout.yaml

          echo "Updated Manifest_Files/quiz-app-rollout.yaml:"
          cat Manifest_Files/quiz-app-rollout.yaml

      # 20. Deploy to Kubernetes Cluster
      - name: Kubernetes CLI (kubectl)
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      - run: |
          kubectl apply -f Manifest_Files/
          
          echo "Waiting for stable version release rollout to be ready..."
          sleep 60
          kubectl get rollouts -n argo-rollouts
          kubectl get pods -n argo-rollouts
          kubectl get svc -n argo-rollouts
          kubectl get ingress -n argo-rollouts
        
        

